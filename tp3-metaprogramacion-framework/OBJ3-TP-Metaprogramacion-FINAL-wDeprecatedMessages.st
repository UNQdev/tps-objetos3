Trait named: #GenericEquals	uses: {}	category: 'OBJ3-TP-Metaprogramacion'!!GenericEquals methodsFor: 'as yet unclassified' stamp: 'EricaAltamirano 4/27/2014 11:10'!= otroObjeto	^ self class = otroObjeto class		and: [ self keyProperties allSatisfy: [ :variable | (self instVarNamed: variable) = (otroObjeto instVarNamed: variable) ] ]! !!GenericEquals methodsFor: 'as yet unclassified' stamp: 'MarceloRubini 4/25/2014 16:09'!keyProperties	^ self requirement.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!GenericEquals classTrait	uses: {}!Trait named: #GenericPrint	uses: {}	category: 'OBJ3-TP-Metaprogramacion'!!GenericPrint methodsFor: 'as yet unclassified' stamp: 'MarceloRubini 4/25/2014 16:09'!keyProperties	^ self requirement.! !!GenericPrint methodsFor: 'as yet unclassified' stamp: 'EricaAltamirano 4/27/2014 14:16'!printOn: aStream	| nombreDeClase listaDeVariables impresion |	nombreDeClase := self class name.	listaDeVariables := self keyProperties		inject: ''		into: [ :lista :variable | lista , variable , ' : ' , (self instVarNamed: variable asString) asString , ', ' ].	impresion := nombreDeClase , '(' , (listaDeVariables copyFrom: 1 to: listaDeVariables size - 2) , ')'.		aStream nextPutAll: impresion.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!GenericPrint classTrait	uses: {}!Object subclass: #SimpleRenameProperty	instanceVariableNames: 'clase propiedad nuevoNombre'	classVariableNames: ''	poolDictionaries: ''	category: 'OBJ3-TP-Metaprogramacion'!!SimpleRenameProperty methodsFor: 'renaming' stamp: 'MarceloRubini 5/5/2014 02:06'!generarNuevosAccesors	| getter setter |	getter := nuevoNombre asString, '		^ ' , nuevoNombre asString.	setter := nuevoNombre asString, ': anObject		' , nuevoNombre asString, ' := anObject'.					self modificarAccesors: propiedad asSymbol con: getter de: clase.	self modificarAccesors: (propiedad , ':') asSymbol con: setter de: clase	! !!SimpleRenameProperty methodsFor: 'renaming' stamp: 'EricaAltamirano 5/1/2014 11:26'!modificarAccesors: unAccesor con: nuevoCodigo de: unaClase	(unaClase canUnderstand: unAccesor)		ifTrue: [ unaClase removeSelector: unAccesor .				 unaClase compile: nuevoCodigo ].! !!SimpleRenameProperty methodsFor: 'renaming' stamp: 'MarceloRubini 5/5/2014 02:03'!modificarPropiedad	clase removeInstVarNamed: propiedad. 	clase addInstVarNamed: nuevoNombre.! !!SimpleRenameProperty methodsFor: 'renaming' stamp: 'MarceloRubini 5/5/2014 02:01'!renombrarPropiedad	self modificarPropiedad.	self generarNuevosAccesors.! !!SimpleRenameProperty methodsFor: 'accessing' stamp: 'MarceloRubini 5/5/2014 02:00'!clase	^ clase! !!SimpleRenameProperty methodsFor: 'accessing' stamp: 'MarceloRubini 5/5/2014 02:00'!clase: anObject	clase := anObject! !!SimpleRenameProperty methodsFor: 'accessing' stamp: 'MarceloRubini 5/5/2014 02:00'!nuevoNombre	^ nuevoNombre! !!SimpleRenameProperty methodsFor: 'accessing' stamp: 'MarceloRubini 5/5/2014 02:00'!nuevoNombre: anObject	nuevoNombre := anObject! !!SimpleRenameProperty methodsFor: 'accessing' stamp: 'MarceloRubini 5/5/2014 02:00'!propiedad	^ propiedad! !!SimpleRenameProperty methodsFor: 'accessing' stamp: 'MarceloRubini 5/5/2014 02:00'!propiedad: anObject	propiedad := anObject! !Object subclass: #Auto	uses: GenericPrint	instanceVariableNames: 'marca combustible'	classVariableNames: ''	poolDictionaries: ''	category: 'OBJ3-TP-Metaprogramacion'!!Auto methodsFor: 'as yet unclassified' stamp: 'MarceloRubini 4/25/2014 16:10'!keyProperties	^ #(modelo combustible).! !!Auto methodsFor: 'as yet unclassified' stamp: 'EricaAltamirano 5/3/2014 18:22'!marca	^marca! !!Auto methodsFor: 'as yet unclassified' stamp: 'EricaAltamirano 5/3/2014 18:22'!marca: unValor 	marca := unValor! !!Auto methodsFor: 'as yet unclassified' stamp: 'EricaAltamirano 5/4/2014 19:46'!metodo1: unValor	self combustible.	combustible := 100.	self metodo3.	self metodo1_new! !!Auto methodsFor: 'as yet unclassified' stamp: 'MarceloRubini 5/4/2014 22:50'!metodo1_new	| variable |	variable := self combustible.	^ 'Este es el metodo 1 para renombrar, devuelvo el combustible: '! !!Auto methodsFor: 'as yet unclassified' stamp: 'EricaAltamirano 5/4/2014 19:46'!metodo3	| autito |	autito := Auto new combustible: 100.	autito metodo1_new! !!Auto methodsFor: 'as yet unclassified' stamp: 'EricaAltamirano 5/2/2014 17:55'!printOn: aStream	| nombreDeClase listaDeVariables impresion |	nombreDeClase := self class name.	listaDeVariables := self keyProperties		inject: ''		into: [ :lista :variable | lista , variable , ' : ' , (self instVarNamed: variable asString) asString , ', ' ].	impresion := nombreDeClase , '(' , (listaDeVariables copyFrom: 1 to: listaDeVariables size - 2) , ')'.		aStream nextPutAll: impresion.! !!Auto methodsFor: 'accessing' stamp: 'MarceloRubini 4/25/2014 14:18'!combustible	^ combustible! !!Auto methodsFor: 'accessing' stamp: 'MarceloRubini 4/25/2014 14:18'!combustible: anObject	combustible := anObject! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Auto class	uses: GenericPrint classTrait	instanceVariableNames: ''!Object subclass: #FullRenameProperty	instanceVariableNames: 'clase propiedad nuevoNombre renombrador'	classVariableNames: ''	poolDictionaries: ''	category: 'OBJ3-TP-Metaprogramacion'!!FullRenameProperty methodsFor: 'renaming' stamp: 'EricaAltamirano 5/4/2014 17:26'!actualizarReferencias	self actualizarReferenciasEnLaClase.	self actualizarReferenciasAMetodoEnElPaquete.! !!FullRenameProperty methodsFor: 'renaming' stamp: 'MarceloRubini 5/4/2014 20:19'!execute	(self clase hasInstVarNamed: self propiedad)		ifTrue: [ 			self modificarPropiedad.			self modificarAccesors.			self actualizarReferencias.		] ifFalse:  [ Exception new signal: 'La clase ', self clase asString, ' no tiene la propiedad: ', self propiedad ].! !!FullRenameProperty methodsFor: 'renaming' stamp: 'EricaAltamirano 5/4/2014 17:20'!modificarAccesors	self modificarAccesor: propiedad asSymbol por: nuevoNombre asSymbol.	self modificarAccesor: (propiedad, ':') asSymbol por: (nuevoNombre, ':') asSymbol.	! !!FullRenameProperty methodsFor: 'renaming' stamp: 'EricaAltamirano 5/3/2014 18:15'!modificarPropiedad	self clase removeInstVarNamed: self propiedad. 	self clase addInstVarNamed: self nuevoNombre.	! !!FullRenameProperty methodsFor: 'accessing' stamp: 'EricaAltamirano 5/3/2014 18:11'!clase	^clase! !!FullRenameProperty methodsFor: 'accessing' stamp: 'EricaAltamirano 5/3/2014 18:11'!clase: unaClase	clase := unaClase! !!FullRenameProperty methodsFor: 'accessing' stamp: 'EricaAltamirano 5/3/2014 18:13'!nuevoNombre	^nuevoNombre! !!FullRenameProperty methodsFor: 'accessing' stamp: 'EricaAltamirano 5/3/2014 18:13'!nuevoNombre: unNombre  	nuevoNombre := unNombre! !!FullRenameProperty methodsFor: 'accessing' stamp: 'EricaAltamirano 5/3/2014 18:12'!propiedad	^propiedad! !!FullRenameProperty methodsFor: 'accessing' stamp: 'EricaAltamirano 5/3/2014 18:12'!propiedad: unaPropiedad 	propiedad := unaPropiedad! !!FullRenameProperty methodsFor: 'accessing' stamp: 'MarceloRubini 5/3/2014 19:31'!renombrador	^ renombrador! !!FullRenameProperty methodsFor: 'accessing' stamp: 'MarceloRubini 5/3/2014 19:31'!renombrador: anObject	renombrador := anObject! !!FullRenameProperty methodsFor: 'update-methods-references-package' stamp: 'EricaAltamirano 5/4/2014 19:45'!actualizarMetodo: unMetodo por: nuevoMetodo en: unaClase	| modificadorDeMetodos | 	modificadorDeMetodos := UpdateReferencesMethodVisitor new 		oldName: unMetodo;		newName: nuevoMetodo.	(unaClase whichSelectorsReferTo: unMetodo) do: [ :metodo | modificadorDeMetodos update: (unaClase >> metodo). ]	! !!FullRenameProperty methodsFor: 'update-methods-references-package' stamp: 'EricaAltamirano 5/4/2014 19:02'!actualizarReferenciaAMetodosEn: unaClase	self actualizarMetodo: propiedad asSymbol por: nuevoNombre asSymbol en: unaClase.	self actualizarMetodo: (propiedad, ':') asSymbol por: (nuevoNombre, ':') asSymbol en: unaClase.! !!FullRenameProperty methodsFor: 'update-methods-references-package' stamp: 'MarceloRubini 5/4/2014 20:03'!actualizarReferenciasAMetodoEnElPaquete	| clasesDelPaquete |	clasesDelPaquete  := SystemNavigation new allClassesInPackageNamed: (clase category).	clasesDelPaquete do: [ :unaClase | self actualizarReferenciaAMetodosEn: unaClase. ]! !!FullRenameProperty methodsFor: 'update-methods-class' stamp: 'EricaAltamirano 5/4/2014 19:23'!actualizarReferenciasEnLaClase	| uv |	uv := UpdateVariableReferencesVisitor  new 			oldName: propiedad;			newName: nuevoNombre.	(clase whichSelectorsAccess: propiedad) do: [ :metodo | uv update: (clase >> metodo). ].! !!FullRenameProperty methodsFor: 'update-methods-class' stamp: 'MarceloRubini 5/4/2014 20:01'!modificarAccesor: unAccesor por: nuevoAccesor	(clase canUnderstand: unAccesor)		ifTrue: [ 			LocalRenameMethod new 				classToRefactor: clase;				methodToRename: unAccesor;				newName: nuevoAccesor;				execute.		 ]			! !Object subclass: #LocalRenameMethod	instanceVariableNames: 'classToRefactor methodToRename newName'	classVariableNames: ''	poolDictionaries: ''	category: 'OBJ3-TP-Metaprogramacion'!!LocalRenameMethod methodsFor: 'executing' stamp: 'NIcolasPasserini 4/20/2014 21:55'!execute	self renameMethod.	self updateReferences.! !!LocalRenameMethod methodsFor: 'executing' stamp: 'NIcolasPasserini 4/20/2014 22:53'!renameMethod	| method ast |	method := classToRefactor lookupSelector: methodToRename.		ast := method ast.	ast selector: newName.		classToRefactor compile: ast newSource classified: method category notifying: nil.	classToRefactor removeSelector: methodToRename	! !!LocalRenameMethod methodsFor: 'executing' stamp: 'EricaAltamirano 5/4/2014 19:45'!updateReferences	| methodModifier |	methodModifier := UpdateReferencesVisitor new		oldName: methodToRename;		newName: newName.		classToRefactor methods do: [ :method | methodModifier update: method ]! !!LocalRenameMethod methodsFor: 'accessing' stamp: 'NIcolasPasserini 4/20/2014 21:50'!classToRefactor	^ classToRefactor! !!LocalRenameMethod methodsFor: 'accessing' stamp: 'NIcolasPasserini 4/20/2014 21:50'!classToRefactor: anObject	classToRefactor := anObject! !!LocalRenameMethod methodsFor: 'accessing' stamp: 'NIcolasPasserini 4/20/2014 21:50'!methodToRename	^ methodToRename! !!LocalRenameMethod methodsFor: 'accessing' stamp: 'NIcolasPasserini 4/20/2014 21:50'!methodToRename: anObject	methodToRename := anObject! !!LocalRenameMethod methodsFor: 'accessing' stamp: 'NIcolasPasserini 4/20/2014 21:50'!newName	^ newName! !!LocalRenameMethod methodsFor: 'accessing' stamp: 'NIcolasPasserini 4/20/2014 21:50'!newName: anObject	newName := anObject! !Object subclass: #UpdateReferencesVisitor	uses: TRBProgramNodeVisitor	instanceVariableNames: 'oldName newName'	classVariableNames: ''	poolDictionaries: ''	category: 'OBJ3-TP-Metaprogramacion'!!UpdateReferencesVisitor methodsFor: 'visiting' stamp: 'EricaAltamirano 5/4/2014 19:32'!visitArgumentNode: anArgumentNode	"Sent *each time* an argument node is found"	^ self visitVariableNode: anArgumentNode! !!UpdateReferencesVisitor methodsFor: 'visiting' stamp: 'EricaAltamirano 5/4/2014 19:32'!visitArgumentNodes: aNodeCollection 	"Sent *once* when visiting method and block nodes"	^aNodeCollection do: [ :each | self visitArgumentNode: each ]! !!UpdateReferencesVisitor methodsFor: 'visiting' stamp: 'EricaAltamirano 5/4/2014 19:32'!visitArrayNode: anArrayNode 	anArrayNode children do: [:each | self visitNode: each]! !!UpdateReferencesVisitor methodsFor: 'visiting' stamp: 'EricaAltamirano 5/4/2014 19:32'!visitAssignmentNode: anAssignmentNode	self visitNode: anAssignmentNode variable.	self visitNode: anAssignmentNode value.! !!UpdateReferencesVisitor methodsFor: 'visiting' stamp: 'EricaAltamirano 5/4/2014 19:32'!visitBlockNode: aBlockNode 	self visitArgumentNodes: aBlockNode arguments.	self visitNode: aBlockNode body! !!UpdateReferencesVisitor methodsFor: 'visiting' stamp: 'EricaAltamirano 5/4/2014 19:32'!visitCascadeNode: aCascadeNode 	aCascadeNode messages do: [:each | self visitNode: each]! !!UpdateReferencesVisitor methodsFor: 'visiting' stamp: 'EricaAltamirano 5/4/2014 19:32'!visitLiteralArrayNode: aRBLiteralArrayNode 	aRBLiteralArrayNode contents do: [:each | self visitNode: each]! !!UpdateReferencesVisitor methodsFor: 'visiting' stamp: 'EricaAltamirano 5/4/2014 19:32'!visitLiteralNode: aLiteralNode! !!UpdateReferencesVisitor methodsFor: 'visiting' stamp: 'EricaAltamirano 5/4/2014 19:44'!visitMessageNode: aMessageNode	(aMessageNode isCascaded not or: [ aMessageNode isFirstCascaded ])		ifTrue: [ self visitNode: aMessageNode receiver ].	aMessageNode arguments do: [ :each | self visitNode: each ].		(aMessageNode selector = self oldName and: [ aMessageNode receiver isSelf])		ifTrue: [ aMessageNode selector: self newName ].! !!UpdateReferencesVisitor methodsFor: 'visiting' stamp: 'EricaAltamirano 5/4/2014 19:32'!visitMethodNode: aMethodNode 	self visitArgumentNodes: aMethodNode arguments.	aMethodNode pragmas		do: [ :each | self visitNode: each ].	self visitNode: aMethodNode body! !!UpdateReferencesVisitor methodsFor: 'visiting' stamp: 'EricaAltamirano 5/4/2014 19:32'!visitNode: aNode 	^aNode acceptVisitor: self! !!UpdateReferencesVisitor methodsFor: 'visiting' stamp: 'EricaAltamirano 5/4/2014 19:32'!visitParseErrorNode: anErrorNode! !!UpdateReferencesVisitor methodsFor: 'visiting' stamp: 'EricaAltamirano 5/4/2014 19:32'!visitPatternBlockNode: aRBPatternBlockNode 	self visitArgumentNodes: aRBPatternBlockNode arguments.	self visitNode: aRBPatternBlockNode body! !!UpdateReferencesVisitor methodsFor: 'visiting' stamp: 'EricaAltamirano 5/4/2014 19:32'!visitPatternWrapperBlockNode: aRBPatternWrapperBlockNode 	self visitNode: aRBPatternWrapperBlockNode wrappedNode.	self visitArgumentNodes: aRBPatternWrapperBlockNode arguments.	self visitNode: aRBPatternWrapperBlockNode body! !!UpdateReferencesVisitor methodsFor: 'visiting' stamp: 'EricaAltamirano 5/4/2014 19:32'!visitPragmaNode: aPragmaNode	aPragmaNode arguments do: [ :each | self visitNode: each ]! !!UpdateReferencesVisitor methodsFor: 'visiting' stamp: 'EricaAltamirano 5/4/2014 19:32'!visitReturnNode: aReturnNode 	^ self visitNode: aReturnNode value! !!UpdateReferencesVisitor methodsFor: 'visiting' stamp: 'EricaAltamirano 5/4/2014 19:32'!visitSelfNode: aSelfNode	^ self visitVariableNode: aSelfNode! !!UpdateReferencesVisitor methodsFor: 'visiting' stamp: 'EricaAltamirano 5/4/2014 19:32'!visitSequenceNode: aSequenceNode 	self visitTemporaryNodes: aSequenceNode temporaries.	aSequenceNode statements do: [:each | self visitNode: each]! !!UpdateReferencesVisitor methodsFor: 'visiting' stamp: 'EricaAltamirano 5/4/2014 19:32'!visitSuperNode: aSuperNode	^ self visitVariableNode: aSuperNode! !!UpdateReferencesVisitor methodsFor: 'visiting' stamp: 'EricaAltamirano 5/4/2014 19:32'!visitTemporaryNode: aNode 	"Sent *each time* a temporary node is found"	^ self visitVariableNode: aNode! !!UpdateReferencesVisitor methodsFor: 'visiting' stamp: 'EricaAltamirano 5/4/2014 19:32'!visitTemporaryNodes: aNodeCollection 	"This is triggered when defining the temporaries between the pipes"	^self visitArgumentNodes: aNodeCollection! !!UpdateReferencesVisitor methodsFor: 'visiting' stamp: 'EricaAltamirano 5/4/2014 19:32'!visitThisContextNode: aThisContextNode	^ self visitVariableNode: aThisContextNode! !!UpdateReferencesVisitor methodsFor: 'visiting' stamp: 'EricaAltamirano 5/4/2014 19:32'!visitVariableNode: aVariableNode	^ aVariableNode name! !!UpdateReferencesVisitor methodsFor: '*Deprecated30'!acceptArgumentNode: anArgumentNode	self deprecated: 'Use visitArgumentNode: instead' on: '29/03/2013' in: #Pharo30.		^ self visitArgumentNode: anArgumentNode! !!UpdateReferencesVisitor methodsFor: '*Deprecated30'!acceptArrayNode: anArrayNode 	self deprecated: 'Use visitArrayNode: instead' on: '29/03/2013' in: #Pharo30.		self visitArrayNode: anArrayNode! !!UpdateReferencesVisitor methodsFor: '*Deprecated30' stamp: 'MarceloRubini 5/5/2014 01:21'!acceptAssignmentNode: anAssignmentNode 	self deprecated: 'Use visitAssignmentNode: instead' on: '29/03/2013' in: #Pharo30.		self visitAssignmentNode: anAssignmentNode.	! !!UpdateReferencesVisitor methodsFor: '*Deprecated30'!acceptBlockNode: aBlockNode 	self deprecated: 'Use visitBlockNode: instead' on: '29/03/2013' in: #Pharo30.		self visitBlockNode: aBlockNode ! !!UpdateReferencesVisitor methodsFor: '*Deprecated30'!acceptCascadeNode: aCascadeNode 	self deprecated: 'Use visitCascadeNode: instead' on: '29/03/2013' in: #Pharo30.		self visitCascadeNode: aCascadeNode ! !!UpdateReferencesVisitor methodsFor: '*Deprecated30'!acceptLiteralArrayNode: aRBLiteralArrayNode 	self deprecated: 'Use visitLiteralArrayNode: instead' on: '29/03/2013' in: #Pharo30.		self visitLiteralArrayNode: aRBLiteralArrayNode ! !!UpdateReferencesVisitor methodsFor: '*Deprecated30'!acceptLiteralNode: aLiteralNode	self deprecated: 'Use visitLiteralNode: instead' on: '29/03/2013' in: #Pharo30.		self visitLiteralNode: aLiteralNode! !!UpdateReferencesVisitor methodsFor: '*Deprecated30'!acceptMessageNode: aMessageNode 	self deprecated: 'Use visitMessageNode: instead' on: '29/03/2013' in: #Pharo30.		self visitMessageNode: aMessageNode 	! !!UpdateReferencesVisitor methodsFor: '*Deprecated30'!acceptMethodNode: aMethodNode 	self deprecated: 'Use visitMethodNode: instead' on: '29/03/2013' in: #Pharo30.		self visitMethodNode: aMethodNode! !!UpdateReferencesVisitor methodsFor: '*Deprecated30'!acceptParseErrorNode: anErrorNode	self deprecated: 'Use visitParseErrorNode: instead' on: '29/03/2013' in: #Pharo30.		self visitParseErrorNode: anErrorNode! !!UpdateReferencesVisitor methodsFor: '*Deprecated30'!acceptPatternBlockNode: aRBPatternBlockNode 	self deprecated: 'Use visitPatternBlockNode: instead' on: '29/03/2013' in: #Pharo30.		self visitPatternBlockNode: aRBPatternBlockNode ! !!UpdateReferencesVisitor methodsFor: '*Deprecated30'!acceptPatternWrapperBlockNode: aRBPatternWrapperBlockNode 	self deprecated: 'Use visitPatternWrapperNode: instead' on: '29/03/2013' in: #Pharo30.		self visitPatternWrapperBlockNode: aRBPatternWrapperBlockNode ! !!UpdateReferencesVisitor methodsFor: '*Deprecated30'!acceptPragmaNode: aPragmaNode	self deprecated: 'Use visitPragmaNode: instead' on: '29/03/2013' in: #Pharo30.		self visitPragmaNode: aPragmaNode ! !!UpdateReferencesVisitor methodsFor: '*Deprecated30'!acceptReturnNode: aReturnNode 	self deprecated: 'Use visitReturnNode: instead' on: '29/03/2013' in: #Pharo30.		^ self visitReturnNode: aReturnNode value! !!UpdateReferencesVisitor methodsFor: '*Deprecated30'!acceptSelfNode: aSelfNode	self deprecated: 'Use visitSelfNode: instead' on: '29/03/2013' in: #Pharo30.		^ self visitSelfNode: aSelfNode! !!UpdateReferencesVisitor methodsFor: '*Deprecated30'!acceptSequenceNode: aSequenceNode 	self deprecated: 'Use visitSequenceNode: instead' on: '29/03/2013' in: #Pharo30.		self visitSequenceNode: aSequenceNode! !!UpdateReferencesVisitor methodsFor: '*Deprecated30'!acceptSuperNode: aSuperNode	self deprecated: 'Use visitSuperNode: instead' on: '29/03/2013' in: #Pharo30.		^ self visitSuperNode: aSuperNode! !!UpdateReferencesVisitor methodsFor: '*Deprecated30'!acceptTemporaryNode: anTemporaryNode	self deprecated: 'Use visitTemporaryNode: instead' on: '29/03/2013' in: #Pharo30.		^ self visitTemporaryNode: anTemporaryNode! !!UpdateReferencesVisitor methodsFor: '*Deprecated30'!acceptThisContextNode: aThisContextNode	self deprecated: 'Use visitThisContextNode: instead' on: '29/03/2013' in: #Pharo30.		^ self visitThisContextNode: aThisContextNode! !!UpdateReferencesVisitor methodsFor: '*Deprecated30'!acceptVariableNode: aVariableNode	self deprecated: 'Use visitVariableNode: instead' on: '29/03/2013' in: #Pharo30.		self visitVariableNode: aVariableNode! !!UpdateReferencesVisitor methodsFor: '*Deprecated30'!visitArgument: each 	self deprecated: 'Use visitArgumentNode: instead' on: '29/03/2013' in: #Pharo30.		^self visitArgumentNode: each! !!UpdateReferencesVisitor methodsFor: '*Deprecated30'!visitArguments: aNodeCollection 	self deprecated: 'Use visitArgumentsNodes: instead' on: '29/03/2013' in: #Pharo30.		^self visitArgumentNodes: aNodeCollection! !!UpdateReferencesVisitor methodsFor: '*Deprecated30'!visitTemporaries: aNodeCollection 	self deprecated: 'Use visitTemporaryNodes: instead' on: '29/03/2013' in: #Pharo30.		^ self visitTemporaryNodes: aNodeCollection! !!UpdateReferencesVisitor methodsFor: 'accessing' stamp: 'EricaAltamirano 5/4/2014 19:32'!newName	^ newName! !!UpdateReferencesVisitor methodsFor: 'accessing' stamp: 'EricaAltamirano 5/4/2014 19:32'!newName: anObject	newName := anObject! !!UpdateReferencesVisitor methodsFor: 'accessing' stamp: 'EricaAltamirano 5/4/2014 19:32'!oldName	^ oldName! !!UpdateReferencesVisitor methodsFor: 'accessing' stamp: 'EricaAltamirano 5/4/2014 19:32'!oldName: anObject	oldName := anObject! !!UpdateReferencesVisitor methodsFor: 'executing' stamp: 'EricaAltamirano 5/4/2014 19:32'!update: aMethod	| ast |	ast := aMethod ast. 	self visitNode: ast.	aMethod methodClass compile: ast newSource! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!UpdateReferencesVisitor class	uses: TRBProgramNodeVisitor classTrait	instanceVariableNames: ''!UpdateReferencesVisitor subclass: #UpdateVariableReferencesVisitor	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OBJ3-TP-Metaprogramacion'!!UpdateVariableReferencesVisitor methodsFor: 'visiting' stamp: 'EricaAltamirano 5/4/2014 18:51'!visitVariableNode: aVariableNode	(aVariableNode name asString = self oldName)		ifTrue: [ aVariableNode identifierToken: (RBIdentifierToken new value: self newName).				^ aVariableNode name]! !UpdateReferencesVisitor subclass: #UpdateReferencesMethodVisitor	instanceVariableNames: 'inPackage'	classVariableNames: ''	poolDictionaries: ''	category: 'OBJ3-TP-Metaprogramacion'!!UpdateReferencesMethodVisitor methodsFor: 'accessing' stamp: 'EricaAltamirano 5/4/2014 19:38'!inPackage	^ inPackage! !!UpdateReferencesMethodVisitor methodsFor: 'accessing' stamp: 'EricaAltamirano 5/4/2014 19:38'!inPackage: anObject	inPackage := anObject! !!UpdateReferencesMethodVisitor methodsFor: 'visiting' stamp: 'EricaAltamirano 5/4/2014 19:44'!visitMessageNode: aMessageNode	(aMessageNode isCascaded not or: [ aMessageNode isFirstCascaded ])		ifTrue: [ self visitNode: aMessageNode receiver ].	aMessageNode arguments do: [ :each | self visitNode: each ].		(aMessageNode selector = self oldName and: [ aMessageNode receiver isSelf not])		ifTrue: [ aMessageNode selector: self newName ].! !