/*
* generated by Xtext
*/
package tp5.dslexterno.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class PlanificacionMateriasGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementosPlanificacionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cElementosPlanificacionEstructuras_PlanificacionParserRuleCall_0_0 = (RuleCall)cElementosPlanificacionAssignment_0.eContents().get(0);
		private final Assignment cPlanificacionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPlanificacionPlanificacionParserRuleCall_1_0 = (RuleCall)cPlanificacionAssignment_1.eContents().get(0);
		
		//Model:
		//	elementosPlanificacion+=Estructuras_Planificacion* //seudo-inicializacion de variables
		//	planificacion=Planificacion;
		public ParserRule getRule() { return rule; }

		//elementosPlanificacion+=Estructuras_Planificacion* //seudo-inicializacion de variables
		//planificacion=Planificacion
		public Group getGroup() { return cGroup; }

		//elementosPlanificacion+=Estructuras_Planificacion*
		public Assignment getElementosPlanificacionAssignment_0() { return cElementosPlanificacionAssignment_0; }

		//Estructuras_Planificacion
		public RuleCall getElementosPlanificacionEstructuras_PlanificacionParserRuleCall_0_0() { return cElementosPlanificacionEstructuras_PlanificacionParserRuleCall_0_0; }

		//planificacion=Planificacion
		public Assignment getPlanificacionAssignment_1() { return cPlanificacionAssignment_1; }

		//Planificacion
		public RuleCall getPlanificacionPlanificacionParserRuleCall_1_0() { return cPlanificacionPlanificacionParserRuleCall_1_0; }
	}

	public class Materias_AbiertasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Materias_Abiertas");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMaterias_AbiertasAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMateriasDisponiblesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMateriasAbiertasAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMateriasAbiertasMateriaParserRuleCall_3_0 = (RuleCall)cMateriasAbiertasAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////====================================================================================
		//Materias_Abiertas:
		//	{Materias_Abiertas} "materias disponibles" "{" materiasAbiertas+=Materia* "}";
		public ParserRule getRule() { return rule; }

		//{Materias_Abiertas} "materias disponibles" "{" materiasAbiertas+=Materia* "}"
		public Group getGroup() { return cGroup; }

		//{Materias_Abiertas}
		public Action getMaterias_AbiertasAction_0() { return cMaterias_AbiertasAction_0; }

		//"materias disponibles"
		public Keyword getMateriasDisponiblesKeyword_1() { return cMateriasDisponiblesKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//materiasAbiertas+=Materia*
		public Assignment getMateriasAbiertasAssignment_3() { return cMateriasAbiertasAssignment_3; }

		//Materia
		public RuleCall getMateriasAbiertasMateriaParserRuleCall_3_0() { return cMateriasAbiertasMateriaParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class Aulas_DisponiblesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Aulas_Disponibles");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAulas_DisponiblesAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAulasDisponiblesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAulasDisponiblesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAulasDisponiblesAulaParserRuleCall_3_0 = (RuleCall)cAulasDisponiblesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Aulas_Disponibles:
		//	{Aulas_Disponibles} "aulas disponibles" "{" aulasDisponibles+=Aula* "}";
		public ParserRule getRule() { return rule; }

		//{Aulas_Disponibles} "aulas disponibles" "{" aulasDisponibles+=Aula* "}"
		public Group getGroup() { return cGroup; }

		//{Aulas_Disponibles}
		public Action getAulas_DisponiblesAction_0() { return cAulas_DisponiblesAction_0; }

		//"aulas disponibles"
		public Keyword getAulasDisponiblesKeyword_1() { return cAulasDisponiblesKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//aulasDisponibles+=Aula*
		public Assignment getAulasDisponiblesAssignment_3() { return cAulasDisponiblesAssignment_3; }

		//Aula
		public RuleCall getAulasDisponiblesAulaParserRuleCall_3_0() { return cAulasDisponiblesAulaParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class Nomina_ProfesoresElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Nomina_Profesores");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNomina_ProfesoresAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cProfesoresEnNominaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cProfesoresLibresAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cProfesoresLibresProfesorParserRuleCall_3_0 = (RuleCall)cProfesoresLibresAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Nomina_Profesores:
		//	{Nomina_Profesores} "profesores en nomina" "{" profesoresLibres+=Profesor* "}";
		public ParserRule getRule() { return rule; }

		//{Nomina_Profesores} "profesores en nomina" "{" profesoresLibres+=Profesor* "}"
		public Group getGroup() { return cGroup; }

		//{Nomina_Profesores}
		public Action getNomina_ProfesoresAction_0() { return cNomina_ProfesoresAction_0; }

		//"profesores en nomina"
		public Keyword getProfesoresEnNominaKeyword_1() { return cProfesoresEnNominaKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//profesoresLibres+=Profesor*
		public Assignment getProfesoresLibresAssignment_3() { return cProfesoresLibresAssignment_3; }

		//Profesor
		public RuleCall getProfesoresLibresProfesorParserRuleCall_3_0() { return cProfesoresLibresProfesorParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class Asignacion_MateriaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Asignacion_Materia");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDiaAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDiaDiaEnumRuleCall_0_0 = (RuleCall)cDiaAssignment_0.eContents().get(0);
		private final Keyword cDeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cHoraInicioAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cHoraInicioHorarioParserRuleCall_2_0 = (RuleCall)cHoraInicioAssignment_2.eContents().get(0);
		private final Keyword cAKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cHoraFinalAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cHoraFinalHorarioParserRuleCall_4_0 = (RuleCall)cHoraFinalAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cMateriaAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cMateriaMateriaCrossReference_6_0 = (CrossReference)cMateriaAssignment_6.eContents().get(0);
		private final RuleCall cMateriaMateriaIDTerminalRuleCall_6_0_1 = (RuleCall)cMateriaMateriaCrossReference_6_0.eContents().get(1);
		
		//Asignacion_Materia:
		//	dia=Dia "de" horaInicio=Horario "a" horaFinal=Horario "," materia=[Materia];
		public ParserRule getRule() { return rule; }

		//dia=Dia "de" horaInicio=Horario "a" horaFinal=Horario "," materia=[Materia]
		public Group getGroup() { return cGroup; }

		//dia=Dia
		public Assignment getDiaAssignment_0() { return cDiaAssignment_0; }

		//Dia
		public RuleCall getDiaDiaEnumRuleCall_0_0() { return cDiaDiaEnumRuleCall_0_0; }

		//"de"
		public Keyword getDeKeyword_1() { return cDeKeyword_1; }

		//horaInicio=Horario
		public Assignment getHoraInicioAssignment_2() { return cHoraInicioAssignment_2; }

		//Horario
		public RuleCall getHoraInicioHorarioParserRuleCall_2_0() { return cHoraInicioHorarioParserRuleCall_2_0; }

		//"a"
		public Keyword getAKeyword_3() { return cAKeyword_3; }

		//horaFinal=Horario
		public Assignment getHoraFinalAssignment_4() { return cHoraFinalAssignment_4; }

		//Horario
		public RuleCall getHoraFinalHorarioParserRuleCall_4_0() { return cHoraFinalHorarioParserRuleCall_4_0; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//materia=[Materia]
		public Assignment getMateriaAssignment_6() { return cMateriaAssignment_6; }

		//[Materia]
		public CrossReference getMateriaMateriaCrossReference_6_0() { return cMateriaMateriaCrossReference_6_0; }

		//ID
		public RuleCall getMateriaMateriaIDTerminalRuleCall_6_0_1() { return cMateriaMateriaIDTerminalRuleCall_6_0_1; }
	}

	public class Estructuras_PlanificacionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Estructuras_Planificacion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNomina_ProfesoresParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAulas_DisponiblesParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMaterias_AbiertasParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		////====================================================================================
		//Estructuras_Planificacion:
		//	Nomina_Profesores | Aulas_Disponibles | Materias_Abiertas;
		public ParserRule getRule() { return rule; }

		//Nomina_Profesores | Aulas_Disponibles | Materias_Abiertas
		public Alternatives getAlternatives() { return cAlternatives; }

		//Nomina_Profesores
		public RuleCall getNomina_ProfesoresParserRuleCall_0() { return cNomina_ProfesoresParserRuleCall_0; }

		//Aulas_Disponibles
		public RuleCall getAulas_DisponiblesParserRuleCall_1() { return cAulas_DisponiblesParserRuleCall_1; }

		//Materias_Abiertas
		public RuleCall getMaterias_AbiertasParserRuleCall_2() { return cMaterias_AbiertasParserRuleCall_2; }
	}

	public class PlanificacionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Planificacion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlanificacionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAnioAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnioINTTerminalRuleCall_1_0 = (RuleCall)cAnioAssignment_1.eContents().get(0);
		private final Keyword cSemestreKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSemestreAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSemestreINTTerminalRuleCall_3_0 = (RuleCall)cSemestreAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cAsignacionDeMateriasAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAsignacionDeMateriasAsignacion_MateriaParserRuleCall_5_0 = (RuleCall)cAsignacionDeMateriasAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Planificacion:
		//	"planificacion" anio=INT "semestre" semestre=INT "{" asignacionDeMaterias+=Asignacion_Materia* "}";
		public ParserRule getRule() { return rule; }

		//"planificacion" anio=INT "semestre" semestre=INT "{" asignacionDeMaterias+=Asignacion_Materia* "}"
		public Group getGroup() { return cGroup; }

		//"planificacion"
		public Keyword getPlanificacionKeyword_0() { return cPlanificacionKeyword_0; }

		//anio=INT
		public Assignment getAnioAssignment_1() { return cAnioAssignment_1; }

		//INT
		public RuleCall getAnioINTTerminalRuleCall_1_0() { return cAnioINTTerminalRuleCall_1_0; }

		//"semestre"
		public Keyword getSemestreKeyword_2() { return cSemestreKeyword_2; }

		//semestre=INT
		public Assignment getSemestreAssignment_3() { return cSemestreAssignment_3; }

		//INT
		public RuleCall getSemestreINTTerminalRuleCall_3_0() { return cSemestreINTTerminalRuleCall_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//asignacionDeMaterias+=Asignacion_Materia*
		public Assignment getAsignacionDeMateriasAssignment_5() { return cAsignacionDeMateriasAssignment_5; }

		//Asignacion_Materia
		public RuleCall getAsignacionDeMateriasAsignacion_MateriaParserRuleCall_5_0() { return cAsignacionDeMateriasAsignacion_MateriaParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class MateriaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Materia");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMateriaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRequiereKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRequerimientosAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRequerimientosRecursoParserRuleCall_4_0 = (RuleCall)cRequerimientosAssignment_4.eContents().get(0);
		private final Keyword cDictadaPorKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cProfesorAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cProfesorProfesorCrossReference_6_0 = (CrossReference)cProfesorAssignment_6.eContents().get(0);
		private final RuleCall cProfesorProfesorIDTerminalRuleCall_6_0_1 = (RuleCall)cProfesorProfesorCrossReference_6_0.eContents().get(1);
		private final Keyword cEnKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cAulaAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cAulaAulaCrossReference_8_0 = (CrossReference)cAulaAssignment_8.eContents().get(0);
		private final RuleCall cAulaAulaIDTerminalRuleCall_8_0_1 = (RuleCall)cAulaAulaCrossReference_8_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		////====================================================================================
		//Materia:
		//	"materia" name=ID "{" "requiere" requerimientos+=Recurso* "dictada por" profesor=[Profesor] "en" aula=[Aula] "}";
		public ParserRule getRule() { return rule; }

		//"materia" name=ID "{" "requiere" requerimientos+=Recurso* "dictada por" profesor=[Profesor] "en" aula=[Aula] "}"
		public Group getGroup() { return cGroup; }

		//"materia"
		public Keyword getMateriaKeyword_0() { return cMateriaKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"requiere"
		public Keyword getRequiereKeyword_3() { return cRequiereKeyword_3; }

		//requerimientos+=Recurso*
		public Assignment getRequerimientosAssignment_4() { return cRequerimientosAssignment_4; }

		//Recurso
		public RuleCall getRequerimientosRecursoParserRuleCall_4_0() { return cRequerimientosRecursoParserRuleCall_4_0; }

		//"dictada por"
		public Keyword getDictadaPorKeyword_5() { return cDictadaPorKeyword_5; }

		//profesor=[Profesor]
		public Assignment getProfesorAssignment_6() { return cProfesorAssignment_6; }

		//[Profesor]
		public CrossReference getProfesorProfesorCrossReference_6_0() { return cProfesorProfesorCrossReference_6_0; }

		//ID
		public RuleCall getProfesorProfesorIDTerminalRuleCall_6_0_1() { return cProfesorProfesorIDTerminalRuleCall_6_0_1; }

		//"en"
		public Keyword getEnKeyword_7() { return cEnKeyword_7; }

		//aula=[Aula]
		public Assignment getAulaAssignment_8() { return cAulaAssignment_8; }

		//[Aula]
		public CrossReference getAulaAulaCrossReference_8_0() { return cAulaAulaCrossReference_8_0; }

		//ID
		public RuleCall getAulaAulaIDTerminalRuleCall_8_0_1() { return cAulaAulaIDTerminalRuleCall_8_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}

	public class ProfesorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Profesor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProfesorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cConDedicacionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDedicacionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDedicacionDedicacionParserRuleCall_3_0 = (RuleCall)cDedicacionAssignment_3.eContents().get(0);
		
		//Profesor:
		//	"profesor" name=ID "con dedicacion" dedicacion=Dedicacion;
		public ParserRule getRule() { return rule; }

		//"profesor" name=ID "con dedicacion" dedicacion=Dedicacion
		public Group getGroup() { return cGroup; }

		//"profesor"
		public Keyword getProfesorKeyword_0() { return cProfesorKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"con dedicacion"
		public Keyword getConDedicacionKeyword_2() { return cConDedicacionKeyword_2; }

		//dedicacion=Dedicacion
		public Assignment getDedicacionAssignment_3() { return cDedicacionAssignment_3; }

		//Dedicacion
		public RuleCall getDedicacionDedicacionParserRuleCall_3_0() { return cDedicacionDedicacionParserRuleCall_3_0; }
	}

	public class DedicacionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Dedicacion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cSimpleAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cSimpleKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cSemiAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cSemiKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cExclusivaAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cExclusivaKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//Dedicacion: //los defino como clases con el nombre entre llaves, los extension methods deberian definirse con (dispatch) 
		//	{Simple} "Simple" | {Semi} "Semi" | {Exclusiva} "Exclusiva";
		public ParserRule getRule() { return rule; }

		////los defino como clases con el nombre entre llaves, los extension methods deberian definirse con (dispatch) 
		//{Simple} "Simple" | {Semi} "Semi" | {Exclusiva} "Exclusiva"
		public Alternatives getAlternatives() { return cAlternatives; }

		////los defino como clases con el nombre entre llaves, los extension methods deberian definirse con (dispatch) 
		//{Simple} "Simple"
		public Group getGroup_0() { return cGroup_0; }

		////los defino como clases con el nombre entre llaves, los extension methods deberian definirse con (dispatch) 
		//{Simple}
		public Action getSimpleAction_0_0() { return cSimpleAction_0_0; }

		//"Simple"
		public Keyword getSimpleKeyword_0_1() { return cSimpleKeyword_0_1; }

		//{Semi} "Semi"
		public Group getGroup_1() { return cGroup_1; }

		//{Semi}
		public Action getSemiAction_1_0() { return cSemiAction_1_0; }

		//"Semi"
		public Keyword getSemiKeyword_1_1() { return cSemiKeyword_1_1; }

		//{Exclusiva} "Exclusiva"
		public Group getGroup_2() { return cGroup_2; }

		//{Exclusiva}
		public Action getExclusivaAction_2_0() { return cExclusivaAction_2_0; }

		//"Exclusiva"
		public Keyword getExclusivaKeyword_2_1() { return cExclusivaKeyword_2_1; }
	}

	public class AulaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Aula");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAulaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRecursosKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRecusosAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRecusosRecursoParserRuleCall_4_0 = (RuleCall)cRecusosAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Aula:
		//	"aula" name=ID "{" "recursos" recusos+=Recurso* "}";
		public ParserRule getRule() { return rule; }

		//"aula" name=ID "{" "recursos" recusos+=Recurso* "}"
		public Group getGroup() { return cGroup; }

		//"aula"
		public Keyword getAulaKeyword_0() { return cAulaKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"recursos"
		public Keyword getRecursosKeyword_3() { return cRecursosKeyword_3; }

		//recusos+=Recurso*
		public Assignment getRecusosAssignment_4() { return cRecusosAssignment_4; }

		//Recurso
		public RuleCall getRecusosRecursoParserRuleCall_4_0() { return cRecusosRecursoParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class RecursoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Recurso");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Recurso:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class HorarioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Horario");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHoraAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cHoraINTTerminalRuleCall_0_0 = (RuleCall)cHoraAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMinutosAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMinutosINTTerminalRuleCall_2_0 = (RuleCall)cMinutosAssignment_2.eContents().get(0);
		
		//Horario:
		//	hora=INT ":" minutos=INT;
		public ParserRule getRule() { return rule; }

		//hora=INT ":" minutos=INT
		public Group getGroup() { return cGroup; }

		//hora=INT
		public Assignment getHoraAssignment_0() { return cHoraAssignment_0; }

		//INT
		public RuleCall getHoraINTTerminalRuleCall_0_0() { return cHoraINTTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//minutos=INT
		public Assignment getMinutosAssignment_2() { return cMinutosAssignment_2; }

		//INT
		public RuleCall getMinutosINTTerminalRuleCall_2_0() { return cMinutosINTTerminalRuleCall_2_0; }
	}
	
	
	public class DiaElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Dia");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLunesEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLunesLunesKeyword_0_0 = (Keyword)cLunesEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMartesEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMartesMartesKeyword_1_0 = (Keyword)cMartesEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMiercolesEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMiercolesMiercolesKeyword_2_0 = (Keyword)cMiercolesEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cJuevesEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cJuevesJuevesKeyword_3_0 = (Keyword)cJuevesEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cViernesEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cViernesViernesKeyword_4_0 = (Keyword)cViernesEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum Dia:
		//	Lunes | Martes | Miercoles | Jueves | Viernes;
		public EnumRule getRule() { return rule; }

		//Lunes | Martes | Miercoles | Jueves | Viernes
		public Alternatives getAlternatives() { return cAlternatives; }

		//Lunes
		public EnumLiteralDeclaration getLunesEnumLiteralDeclaration_0() { return cLunesEnumLiteralDeclaration_0; }

		//"Lunes"
		public Keyword getLunesLunesKeyword_0_0() { return cLunesLunesKeyword_0_0; }

		//Martes
		public EnumLiteralDeclaration getMartesEnumLiteralDeclaration_1() { return cMartesEnumLiteralDeclaration_1; }

		//"Martes"
		public Keyword getMartesMartesKeyword_1_0() { return cMartesMartesKeyword_1_0; }

		//Miercoles
		public EnumLiteralDeclaration getMiercolesEnumLiteralDeclaration_2() { return cMiercolesEnumLiteralDeclaration_2; }

		//"Miercoles"
		public Keyword getMiercolesMiercolesKeyword_2_0() { return cMiercolesMiercolesKeyword_2_0; }

		//Jueves
		public EnumLiteralDeclaration getJuevesEnumLiteralDeclaration_3() { return cJuevesEnumLiteralDeclaration_3; }

		//"Jueves"
		public Keyword getJuevesJuevesKeyword_3_0() { return cJuevesJuevesKeyword_3_0; }

		//Viernes
		public EnumLiteralDeclaration getViernesEnumLiteralDeclaration_4() { return cViernesEnumLiteralDeclaration_4; }

		//"Viernes"
		public Keyword getViernesViernesKeyword_4_0() { return cViernesViernesKeyword_4_0; }
	}
	
	private ModelElements pModel;
	private Materias_AbiertasElements pMaterias_Abiertas;
	private Aulas_DisponiblesElements pAulas_Disponibles;
	private Nomina_ProfesoresElements pNomina_Profesores;
	private Asignacion_MateriaElements pAsignacion_Materia;
	private Estructuras_PlanificacionElements pEstructuras_Planificacion;
	private PlanificacionElements pPlanificacion;
	private MateriaElements pMateria;
	private ProfesorElements pProfesor;
	private DedicacionElements pDedicacion;
	private AulaElements pAula;
	private RecursoElements pRecurso;
	private DiaElements unknownRuleDia;
	private HorarioElements pHorario;
	
	private final Grammar grammar;

	private XbaseGrammarAccess gaXbase;

	@Inject
	public PlanificacionMateriasGrammarAccess(GrammarProvider grammarProvider,
		XbaseGrammarAccess gaXbase) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("tp5.dslexterno.xtext.PlanificacionMaterias".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}

	
	//Model:
	//	elementosPlanificacion+=Estructuras_Planificacion* //seudo-inicializacion de variables
	//	planificacion=Planificacion;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	////====================================================================================
	//Materias_Abiertas:
	//	{Materias_Abiertas} "materias disponibles" "{" materiasAbiertas+=Materia* "}";
	public Materias_AbiertasElements getMaterias_AbiertasAccess() {
		return (pMaterias_Abiertas != null) ? pMaterias_Abiertas : (pMaterias_Abiertas = new Materias_AbiertasElements());
	}
	
	public ParserRule getMaterias_AbiertasRule() {
		return getMaterias_AbiertasAccess().getRule();
	}

	//Aulas_Disponibles:
	//	{Aulas_Disponibles} "aulas disponibles" "{" aulasDisponibles+=Aula* "}";
	public Aulas_DisponiblesElements getAulas_DisponiblesAccess() {
		return (pAulas_Disponibles != null) ? pAulas_Disponibles : (pAulas_Disponibles = new Aulas_DisponiblesElements());
	}
	
	public ParserRule getAulas_DisponiblesRule() {
		return getAulas_DisponiblesAccess().getRule();
	}

	//Nomina_Profesores:
	//	{Nomina_Profesores} "profesores en nomina" "{" profesoresLibres+=Profesor* "}";
	public Nomina_ProfesoresElements getNomina_ProfesoresAccess() {
		return (pNomina_Profesores != null) ? pNomina_Profesores : (pNomina_Profesores = new Nomina_ProfesoresElements());
	}
	
	public ParserRule getNomina_ProfesoresRule() {
		return getNomina_ProfesoresAccess().getRule();
	}

	//Asignacion_Materia:
	//	dia=Dia "de" horaInicio=Horario "a" horaFinal=Horario "," materia=[Materia];
	public Asignacion_MateriaElements getAsignacion_MateriaAccess() {
		return (pAsignacion_Materia != null) ? pAsignacion_Materia : (pAsignacion_Materia = new Asignacion_MateriaElements());
	}
	
	public ParserRule getAsignacion_MateriaRule() {
		return getAsignacion_MateriaAccess().getRule();
	}

	////====================================================================================
	//Estructuras_Planificacion:
	//	Nomina_Profesores | Aulas_Disponibles | Materias_Abiertas;
	public Estructuras_PlanificacionElements getEstructuras_PlanificacionAccess() {
		return (pEstructuras_Planificacion != null) ? pEstructuras_Planificacion : (pEstructuras_Planificacion = new Estructuras_PlanificacionElements());
	}
	
	public ParserRule getEstructuras_PlanificacionRule() {
		return getEstructuras_PlanificacionAccess().getRule();
	}

	//Planificacion:
	//	"planificacion" anio=INT "semestre" semestre=INT "{" asignacionDeMaterias+=Asignacion_Materia* "}";
	public PlanificacionElements getPlanificacionAccess() {
		return (pPlanificacion != null) ? pPlanificacion : (pPlanificacion = new PlanificacionElements());
	}
	
	public ParserRule getPlanificacionRule() {
		return getPlanificacionAccess().getRule();
	}

	////====================================================================================
	//Materia:
	//	"materia" name=ID "{" "requiere" requerimientos+=Recurso* "dictada por" profesor=[Profesor] "en" aula=[Aula] "}";
	public MateriaElements getMateriaAccess() {
		return (pMateria != null) ? pMateria : (pMateria = new MateriaElements());
	}
	
	public ParserRule getMateriaRule() {
		return getMateriaAccess().getRule();
	}

	//Profesor:
	//	"profesor" name=ID "con dedicacion" dedicacion=Dedicacion;
	public ProfesorElements getProfesorAccess() {
		return (pProfesor != null) ? pProfesor : (pProfesor = new ProfesorElements());
	}
	
	public ParserRule getProfesorRule() {
		return getProfesorAccess().getRule();
	}

	//Dedicacion: //los defino como clases con el nombre entre llaves, los extension methods deberian definirse con (dispatch) 
	//	{Simple} "Simple" | {Semi} "Semi" | {Exclusiva} "Exclusiva";
	public DedicacionElements getDedicacionAccess() {
		return (pDedicacion != null) ? pDedicacion : (pDedicacion = new DedicacionElements());
	}
	
	public ParserRule getDedicacionRule() {
		return getDedicacionAccess().getRule();
	}

	//Aula:
	//	"aula" name=ID "{" "recursos" recusos+=Recurso* "}";
	public AulaElements getAulaAccess() {
		return (pAula != null) ? pAula : (pAula = new AulaElements());
	}
	
	public ParserRule getAulaRule() {
		return getAulaAccess().getRule();
	}

	//Recurso:
	//	name=ID;
	public RecursoElements getRecursoAccess() {
		return (pRecurso != null) ? pRecurso : (pRecurso = new RecursoElements());
	}
	
	public ParserRule getRecursoRule() {
		return getRecursoAccess().getRule();
	}

	//enum Dia:
	//	Lunes | Martes | Miercoles | Jueves | Viernes;
	public DiaElements getDiaAccess() {
		return (unknownRuleDia != null) ? unknownRuleDia : (unknownRuleDia = new DiaElements());
	}
	
	public EnumRule getDiaRule() {
		return getDiaAccess().getRule();
	}

	//Horario:
	//	hora=INT ":" minutos=INT;
	public HorarioElements getHorarioAccess() {
		return (pHorario != null) ? pHorario : (pHorario = new HorarioElements());
	}
	
	public ParserRule getHorarioRule() {
		return getHorarioAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=" | "-=" | "*=" | "/=" | "%=" | "<" "<" "=" | ">" ">"? ">=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=" | "===" | "!==";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<" "=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"->" | "..<" | ">" ".." | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<" | "=>") | "<>" | "?:";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XPostfixOperation returns XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?;
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}

	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ("." | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (memberCallArguments+=XShortClosure |
	//	memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")? memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression returns XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XLiteral returns XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}

	//XSetLiteral:
	//	{XSetLiteral} "#" "{" (elements+=XExpression ("," elements+=XExpression)*)? "}";
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}

	//XListLiteral:
	//	{XListLiteral} "#" "[" (elements+=XExpression ("," elements+=XExpression)*)? "]";
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//	=> ({XClosure} "[") => ((declaredFormalParameters+=JvmFormalParameter (","
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//	{XSwitchExpression} "switch" (=> ("(" declaredParam=JvmFormalParameter ":") switch=XExpression ")" | =>
	//	(declaredParam=JvmFormalParameter ":")? switch=XExpression) "{" cases+=XCasePart* ("default" ":" default=XExpression)?
	//	"}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ("case" case=XExpression)? (":" then=XExpression | ",");
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//	=> ({XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":") forExpression=XExpression ")"
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XBasicForLoopExpression returns XExpression:
	//	{XBasicForLoopExpression} "for" "(" (initExpressions+=XExpressionOrVarDeclaration (","
	//	initExpressions+=XExpressionOrVarDeclaration)*)? ";" expression=XExpression? ";" (updateExpressions+=XExpression (","
	//	updateExpressions+=XExpression)*)? ")" eachExpression=XExpression;
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//	{XBlockExpression} "{" (expressions+=XExpressionOrVarDeclaration ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionOrVarDeclaration returns XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ("="
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//	{XFeatureCall} ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)*)? ")")? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//FeatureCallID:
	//	ValidID | "extends" | "static" | "import" | "extension";
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}

	//IdOrSuper:
	//	FeatureCallID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? (=>
	//	explicitConstructorCall?="(" (arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")")?
	//	arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//	{XReturnExpression} "return" -> expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XSynchronizedExpression returns XExpression:
	//	=> ({XSynchronizedExpression} "synchronized" "(") param=XExpression ")" expression=XExpression;
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * / StaticQualifier:
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//terminal HEX:
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	} 

	//terminal DECIMAL:
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	} 

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXbase.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//ArrayBrackets:
	//	"[" "]";
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXbase.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXbase.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)*
	//	">")?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXbase.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXbase.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXbase.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXbase.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXbase.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXbase.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXbase.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName "." "*";
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXbase.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXbase.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXbase.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}

	//XImportDeclaration:
	//	"import" (static?="static" extension?="extension"? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?="*" | memberName=ValidID) | importedType=[JvmDeclaredType|QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ";"?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXbase.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}

	//QualifiedNameInStaticImport:
	//	(ValidID ".")+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXbase.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXbase.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaXbase.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXbase.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXbase.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXbase.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXbase.getANY_OTHERRule();
	} 
}
