/**
 * generated by Xtext
 */
package tp5.dslexterno.xtext.validation;

import com.google.common.collect.Iterables;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import tp5.dslexterno.xtext.planificacionMaterias.Dedicacion;
import tp5.dslexterno.xtext.planificacionMaterias.Elementos;
import tp5.dslexterno.xtext.planificacionMaterias.Exclusiva;
import tp5.dslexterno.xtext.planificacionMaterias.Materia;
import tp5.dslexterno.xtext.planificacionMaterias.Materias_Abiertas;
import tp5.dslexterno.xtext.planificacionMaterias.Model;
import tp5.dslexterno.xtext.planificacionMaterias.PlanificacionMateriasPackage;
import tp5.dslexterno.xtext.planificacionMaterias.Profesor;
import tp5.dslexterno.xtext.planificacionMaterias.Semi;
import tp5.dslexterno.xtext.planificacionMaterias.Simple;
import tp5.dslexterno.xtext.validation.AbstractPlanificacionMateriasValidator;

/**
 * Custom validation rules.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
@SuppressWarnings("all")
public class PlanificacionMateriasValidator extends AbstractPlanificacionMateriasValidator {
  @Check
  public void validarDedicacionesDeProfesor(final Materia materia) {
    final Profesor profesor = this.dictadaPor(materia);
    EObject _eContainer = materia.eContainer();
    EList<Elementos> _elementos = ((Model) _eContainer).getElementos();
    Iterable<Materias_Abiertas> _filter = Iterables.<Materias_Abiertas>filter(_elementos, Materias_Abiertas.class);
    Materias_Abiertas _get = ((Materias_Abiertas[])Conversions.unwrapArray(_filter, Materias_Abiertas.class))[0];
    final EList<Materia> materias = _get.getMateriasADictar();
    int _materiasConProfesor = this.materiasConProfesor(materias, profesor);
    int _cantMateriasSegunDedicacion = this.cantMateriasSegunDedicacion(profesor);
    boolean _greaterEqualsThan = (_materiasConProfesor >= _cantMateriasSegunDedicacion);
    if (_greaterEqualsThan) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("El profesor ");
      String _nombre = profesor.getNombre();
      _builder.append(_nombre, "");
      _builder.append(" supera el limite de su dedicacion");
      this.error(_builder.toString(), materia, 
        PlanificacionMateriasPackage.Literals.MATERIA__PROFESOR);
    }
  }
  
  public int materiasConProfesor(final EList<Materia> list, final Profesor profesor) {
    final Function1<Materia, Boolean> _function = new Function1<Materia, Boolean>() {
      public Boolean apply(final Materia m) {
        Profesor _profesor = m.getProfesor();
        return Boolean.valueOf(_profesor.equals(profesor));
      }
    };
    Iterable<Materia> _filter = IterableExtensions.<Materia>filter(list, _function);
    return IterableExtensions.size(_filter);
  }
  
  public Profesor dictadaPor(final Materia materia) {
    return materia.getProfesor();
  }
  
  public int cantMateriasSegunDedicacion(final Profesor profesor) {
    Dedicacion _dedicacion = profesor.getDedicacion();
    return this.cantidadMaterias(_dedicacion);
  }
  
  protected int _cantidadMaterias(final Simple dedicacion) {
    return 2;
  }
  
  protected int _cantidadMaterias(final Semi dedicacion) {
    return 4;
  }
  
  protected int _cantidadMaterias(final Exclusiva dedicacion) {
    return 1;
  }
  
  public int cantidadMaterias(final Dedicacion dedicacion) {
    if (dedicacion instanceof Exclusiva) {
      return _cantidadMaterias((Exclusiva)dedicacion);
    } else if (dedicacion instanceof Semi) {
      return _cantidadMaterias((Semi)dedicacion);
    } else if (dedicacion instanceof Simple) {
      return _cantidadMaterias((Simple)dedicacion);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(dedicacion).toString());
    }
  }
}
