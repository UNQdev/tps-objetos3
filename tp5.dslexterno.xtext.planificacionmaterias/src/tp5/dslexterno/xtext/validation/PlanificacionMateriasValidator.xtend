/*
 * generated by Xtext
 */
package tp5.dslexterno.xtext.validation

import org.eclipse.emf.common.util.EList
import org.eclipse.xtext.validation.Check
import tp5.dslexterno.xtext.planificacionMaterias.Exclusiva
import tp5.dslexterno.xtext.planificacionMaterias.Materia
import tp5.dslexterno.xtext.planificacionMaterias.Model
import tp5.dslexterno.xtext.planificacionMaterias.PlanificacionMateriasPackage
import tp5.dslexterno.xtext.planificacionMaterias.Profesor
import tp5.dslexterno.xtext.planificacionMaterias.Semi
import tp5.dslexterno.xtext.planificacionMaterias.Simple
import tp5.dslexterno.xtext.planificacionMaterias.Materias_Abiertas

//import org.eclipse.xtext.validation.Check
/**
 * Custom validation rules. 
 *
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
class PlanificacionMateriasValidator extends AbstractPlanificacionMateriasValidator {

	@Check
	def validarDedicacionesDeProfesor(Materia materia) {
		val profesor = materia.dictadaPor
		val materias = (materia.eContainer as Model).elementosPlanificacion.filter(Materias_Abiertas).get(0).materiasAbiertas
		if (materias.materiasConProfesor(profesor) > profesor.cantMateriasSegunDedicacion) {
			error('''El profesor «profesor.name» supera el limite de su dedicacion''', materia,
				PlanificacionMateriasPackage.Literals.MATERIA__PROFESOR) //Mensaje, Objeto que no cumple la validacion, Property del objeto que falla
		}
	}
	
	def int materiasConProfesor(EList<Materia> list, Profesor profesor){
		return list.filter[m | m.profesor.equals(profesor)].size
	}
	
	def Profesor dictadaPor(Materia materia){
		return materia.profesor
	}

	def int cantMateriasSegunDedicacion(Profesor profesor) {
		return (profesor.dedicacion).cantidadMaterias
	}

	def dispatch int cantidadMaterias(Simple dedicacion) { return 1 }
	def dispatch int cantidadMaterias(Semi dedicacion) { return 2 }
	def dispatch int cantidadMaterias(Exclusiva dedicacion) { return 5 }

}
